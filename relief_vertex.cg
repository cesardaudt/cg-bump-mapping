struct VertexIn{  // input :  vertex we get it from OpenGL
	float4 position	: POSITION;
//	float3 normal	: NORMAL;
	float2 texCoord	: TEXCOORD0;
	float3 tangent	: TEXCOORD1;
	float3 binormal	: TEXCOORD2;
	float3 normal	: TEXCOORD3;
};

struct VertexOut   // Output: the modified input vertex 
{
	float4 position    : POSITION;
	float2 texCoord    : TEXCOORD0;
	float2 normalCoord : TEXCOORD1;
//	float3 lightVector : TEXCOORD2;
	float3 lightPos    : TEXCOORD2;
	float3 viewVector  : TEXCOORD3;
};



VertexOut main(VertexIn vIn, //uniform float4x4 modelViewProj,   
                            //uniform sampler2D bumpTex
		const uniform float4x4 modelViewProj,
		const uniform float3 lightPosition,
		const uniform float3 viewerPosition)
{
	VertexOut vOut;

//*
	// Calculate the light vector
//	vOut.lightVector = lightPosition - vIn.position.xyz;
	vOut.lightPos = lightPosition;
	vOut.viewVector = viewerPosition - vIn.position.xyz;

	// Transform the light vector from object space into tangent space
	float3x3 TBNMatrix = float3x3(vIn.tangent, vIn.binormal, vIn.normal);
	vOut.lightPos.xyz = mul(TBNMatrix, vOut.lightPos);
	vOut.viewVector.xyz = mul(TBNMatrix, vOut.viewVector);
	
	// Transform the current vertex from object space to clip space, since OpenGL isn't doing it for us
	// as long we're using a vertex shader
	vOut.position = mul(modelViewProj, vIn.position);
	
	// Send the texture map coords and normal map coords to the fragment shader
	vOut.texCoord = vIn.texCoord;
	vOut.normalCoord = vIn.texCoord;
//*/

	return vOut;
}
