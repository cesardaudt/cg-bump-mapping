struct FragmentIn {  // input : vertex in texture coordinate
	float4 color       : COLOR0;
	float2 texCoord    : TEXCOORD0;
	float2 normalCoord : TEXCOORD1;
//	float3 lightVector : TEXCOORD2;
	float3 lightPos    : TEXCOORD2;
	float3 viewVector  : TEXCOORD3;
};

struct FragmentOut { // output : output color
	float4 color : COLOR0;
};

//float4 main(float4 color : COLOR)
FragmentOut main(FragmentIn fIn, uniform sampler2D colorTex : TEXUNIT0, // Color map
		uniform sampler2D bumpTex : TEXUNIT1,	// Normal map
		uniform sampler2D heightTex : TEXUNIT2,	// Height map
		uniform float3 lightDiffuseColor)
{
	FragmentOut fOut;

	int numSteps = 128;
	float depth = 0.5;
	fIn.viewVector = normalize(fIn.viewVector);
	float3 bottomCoord = float3(fIn.texCoord - depth*float2((fIn.viewVector.x/fIn.viewVector.z), (fIn.viewVector.y/fIn.viewVector.z)), depth);
	float3 ray = (bottomCoord - float3(fIn.texCoord, 0))/numSteps;
	float3 rayPos;
	rayPos.xy = fIn.texCoord;
	rayPos.z = tex2D(heightTex, rayPos.xy).x;

//	int zzz = tex2D(heightTex, rayPos.xy).x;
//	while(rayPos.z <  tex2D(heightTex, rayPos.xy).x) {
	for(int i=0; i<numSteps; i++) {
		if(tex2D(heightTex, rayPos.xy).x < rayPos.z)
			rayPos += ray;
	}

	float3 lightRay = rayPos;
	ray = (fIn.lightPos - rayPos)/numSteps;
	for(int i=0; i<numSteps; i++) {
		if(tex2D(heightTex, lightRay.xy).x < lightRay.z)
			lightRay += ray;
	}

	// We must remember to normalize the light vector as it's linearly interpolated across the surface,
	// which in turn means the length of the vector will change as we interpolate
//	fIn.lightVector = normalize(fIn.lightVector - rayPos);
	float3 lightVector = normalize(fIn.lightPos - rayPos);

	// Since the normals in the normal map are in the (color) range [0, 1] we need to uncompress them
	// to "real" normal (vector) directions.
	// Decompress vector ([0, 1] -> [-1, 1])
//	float3 vNormal = 2.0f * (tex2D(bumpTex, fIn.normalCoord).rgb - 0.5f);
//	float3 vNormal = 2.0f * (tex2D(bumpTex, rayPos.xy).rgb - 0.5f);
	float3 vNormal = 2.0f * (tex2D(bumpTex, lightRay.xy).rgb - 0.5f);
	
	// Calculate the diffuse component and store it as the final color in 'colorOUT'
	// The diffuse component is defined as: I = Dl * Dm * clamp(Lâ€¢N, 0, 1)
	// saturate() works just like clamp() except that it implies a clamping between [0;1]
//	fOut.color.rgb = lightDiffuseColor * tex2D(colorTex, fIn.texCoord).rgb * saturate(dot(fIn.lightVector, vNormal));
//	fOut.color.rgb = lightDiffuseColor * tex2D(colorTex, rayPos.xy).rgb * saturate(dot(fIn.lightVector, vNormal));
	fOut.color.rgb = lightDiffuseColor * tex2D(colorTex, rayPos.xy).rgb * saturate(dot(lightVector, vNormal));

	return fOut;
}
